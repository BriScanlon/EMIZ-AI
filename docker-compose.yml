services:
  neo4j:
    image: neo4j:latest
    container_name: neo4j-container
    ports:
      - "${DATABASE_WEB_PORT}:${DATABASE_WEB_PORT}" # Neo4j browser web interface
      - "${DATABASE_BOLT_PORT}:${DATABASE_BOLT_PORT}" # Bolt protocol for database connections
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}" # Replace with your desired username/password
    volumes:
      - ./neo4j/data:/data # Data directory for database files
      - ./neo4j/logs:/logs # Logs directory
      - ./neo4j/import:/import # Directory for importing files
      - ./neo4j/plugins:/plugins # Directory for plugins
    restart: unless-stopped

  api-service:
    build:
      context: ./API # Build context is the /API/ folder
      dockerfile: Dockerfile # Uses the Dockerfile within the /API/ folder
    container_name: api-container
    ports:
      - "${API_EXTERNAL_PORT}:${API_INTERNAL_PORT}" # Exposes the API on port 8000
    env_file:
      - ./.env # Loads environment variables from the .env file
    environment:
      DATABASE_URL: "bolt://${NEO4J_USER}:${NEO4J_PASSWORD}@neo4j-container:${DATABASE_BOLT_PORT}" # Neo4j connection string
      CUDA_VISIBLE_DEVICES: "0"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    runtime: nvidia
    volumes:
      - ./API:/app # Mounts the /API/ folder to /app in the container
    depends_on:
      - neo4j # Ensures Neo4j starts before the Python app
    restart: unless-stopped

networks:
  default:
    external: false
